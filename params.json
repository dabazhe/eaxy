{"name":"Eaxy","tagline":"Easy XML library for Java","body":"EAXY - An easy to use XML library for Java\r\n==========================================\r\n\r\nEAXY is a Java library for building, parsing, searching and manipulating XML.\r\n\r\nIt is small (< 50 kB) and has no dependencies. It's aim is to have a compact\r\nsyntax for doing the most common operations on XML and HTML trees.\r\n\r\n\r\nOverview\r\n--------\r\n\r\nEAXY is build with the following guiding principles:\r\n\r\n* Namespaces must be build in from the start\r\n* Utility methods are good\r\n* Links to parent nodes and document complicates matters\r\n* Libraries should not have dependencies\r\n\r\n\r\n\r\nBuilding XML documents:\r\n-----------------------\r\n        Namespace A_NS = new Namespace(\"uri:a\", \"a\");\r\n        Namespace B_NS = new Namespace(\"uri:b\", \"b\");\r\n\r\n        Element xml = A_NS.el(\"root\",\r\n                Xml.el(\"node-without-namespace\", \"element text\"), \r\n                A_NS.el(\"parent\", \r\n                        A_NS.el(\"child\")),\r\n                B_NS.el(\"other-parent\", Xml.text(\"Here's some text\")));\r\n\r\n\r\nManipulating XML documents:\r\n---------------------------\r\n        Element div = el(\"div\");\r\n        assertThat(div.className()).isNull();\r\n        div.addClass(\"important\");\r\n        div.addClass(\"hidden\");\r\n        assertThat(div.className()).isEqualTo(\"important hidden\");\r\n        div.removeClass(\"hidden\");\r\n        div.removeClass(\"hidden\");\r\n        assertThat(div.className()).isEqualTo(\"important\");\r\n        div.removeClass(\"important\");\r\n        assertThat(div.className()).isEmpty();\r\n\r\n\r\nFinding contents of XML documents:\r\n---------------------------------\r\n        Element xml = el(\"div\",\r\n                el(\"div\").id(\"not-here\").add(text(\"something\")),\r\n                el(\"div\").id(\"below-here\").add(\r\n                        el(\"div\", el(\"div\", el(\"p\", text(\"around \"), el(\"span\", \"HERE\"), text(\" around\"))))));\r\n        assertThat(xml.find(\"...\", \"#below-here\", \"...\", \"p\", \"...\").first().text())\r\n            .isEqualTo(\"HERE\");\r\n\r\n\r\nHTML utilities:\r\n---------------\r\n        Element form = el(\"form\",\r\n                el(\"input\").id(\"first_name_id\").name(\"first_name\").type(\"text\").val(\"Darth\"),\r\n                el(\"input\").id(\"last_name_id\").name(\"last_name\").type(\"text\").val(\"Vader\"),\r\n                el(\"input\").name(\"createPerson\").type(\"submit\").val(\"Create person\"));\r\n        assertThat(form.find(\"input\").ids()).containsExactly(\"first_name_id\", \"last_name_id\");\r\n        assertThat(form.find(\"input\").values()).containsExactly(\"Darth\", \"Vader\", \"Create person\");\r\n        assertThat(form.find(\"input\").names()).containsExactly(\"first_name\", \"last_name\", \"createPerson\");\r\n\r\n        assertThat(form.find(\"input\").first().val()).isEqualTo(\"Darth\");\r\n\r\n\r\nKnown issues:\r\n-------------\r\n* SAX namespace may be broken with certain classpath combinations - perhaps I need to write my own parser\r\n* Finding doesn't include the current element, which is often non-intuitive\r\n* The \"...\" syntax is unintuitive and could use some improvement\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}